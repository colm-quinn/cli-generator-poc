// Code generated by cli-generator-poc. DO NOT EDIT.
// Copyright {{.Year}} MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package {{.Package}}

import (
	"context"

	"github.com/mongodb/mongodb-atlas-cli/internal/cli"
  "github.com/mongodb/mongodb-atlas-cli/internal/config"
  "github.com/mongodb/mongodb-atlas-cli/internal/flag"
  "github.com/mongodb/mongodb-atlas-cli/internal/prompt"
  "github.com/mongodb/mongodb-atlas-cli/internal/store"
  "github.com/mongodb/mongodb-atlas-cli/internal/telemetry"
  "github.com/mongodb/mongodb-atlas-cli/internal/usage"
  "github.com/spf13/cobra"
  "go.mongodb.org/atlas/mongodbatlas"
)

// TODO: Handle output template

type {{.Name}}Opts struct {
	cli.OutputOpts
	cli.InputOpts
	cli.GlobalOpts
  {{ range $parameter := .Parameters -}}
  {{.Name}} {{.Type}}
  {{ end }}
}

func (opts *CmdOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

func (opts *{{.Name}}Opts) New{{.Name}}Request() *mongodbatlas {
  // TODO: Map command parameters to equivalent SDK parameters
	// return &mongodbatlas.LiveMigration{
  {{- range $parameter := .Parameters }}
      // <SdkParameter>: {{.Name}},
    {{- end }}
 }

// TODO: Define output template for text output format
var {{.Name}}Template = ``

func (opts *{{.Name}}Opts) Validate() error {
  {{- range $parameter := .Parameters -}}
  {{if and .Required (ne .Type "boolean")}}
    if opts.{{.Name}} == "" {
      return "Missing required parameter: " + {{.Name}}
    }
    {{- end }}
  {{- end }}
	// TODO: Add any custom input validation required
	return nil
}

func (opts *{{.Name}}Opts) Run() error {
	if err := opts.Prompt(); err != nil {
		return err
	}

	request := opts.New{{.Name}}Request()

  // TODO: Add any missing sdk parameters to the call

	return opts.Print(r)
}

func {{.Name}}Builder() *cobra {
	opts := &{{.Name}}Opts{}
	cmd := &cobra{
		Use:   {{.Name}},
		Short: {{.Short}},
		Long:  {{.Long}},
		PreRunE: func(cmd *cobra, args []string) error {
			return opts.PreRunE(
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), {{.Name}}),
				opts.InitInput(cmd.InOrStdin()),
				opts.Validate,
			)
		},
		RunE: func(cmd *cobra, args []string) error {
			return opts.Run()
		},
	}
	{{ range $parameter := .Parameters }}
    {{- if eq .Type "boolean" }}
    cmd.Flags().BoolVar(&opts.{{.Name}}, "{{.Flag}}", {{.DefaultValue}}, "{{.Usage}}")
    {{- else }}
    {{- if .Short }}
    cmd.Flags().StringVar(&opts.{{.Name}}, "{{.Flag}}", {{.Short}}, "{{.DefaultValue}}", "{{.Usage}}")
    {{- else }}
    cmd.Flags().StringVar(&opts.{{.Name}}, "{{.Flag}}", "{{.DefaultValue}}", "{{.Usage}}")
    {{- end }}
    {{- end }}
    {{- end }}
    {{ range $parameter := .Parameters }}
    {{- if .Required }}
    _ = cmd.MarkFlagRequired(flag.{{.Name}})
    {{- end }}
  {{- end }}

	return cmd
}
