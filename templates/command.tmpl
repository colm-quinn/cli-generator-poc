// Code generated by cli-generator-poc. DO NOT EDIT.
// Copyright {{.Year}} MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package {{.Package}}

import (
	"context"

	{{.SdkModels}}
	"github.com/mongodb/mongodb-atlas-cli/internal/config"
	"github.com/mongodb/mongodb-atlas-cli/internal/store"
	"github.com/spf13/cobra"
)

type CmdOpts struct {
  // {{ range $operation := .Operations }}
    // TODO: Struct members
    store store.{{.Store}}
  {{ end }}
}

func (opts *CmdOpts) initStore(ctx context.Context) func() error {
	return func() error {
		var err error
		opts.store, err = store.New(store.AuthenticatedPreset(config.Default()), store.WithContext(ctx))
		return err
	}
}

var cmdTemplate = {{.CommandHeader}}
{{.CommandTemplate}}

func (opts *CmdOpts) Run() error {
	if err := opts.Prompt(); err != nil {
		return err
	}

	request := opts.NewRequest()

// TODO: Get correct sdk call from generated code
//	r, err := opts.store.LiveMigrationCreate(opts.ConfigProjectID(), createRequest)
//	if err != nil {
//		return err
//	}

	return opts.Print(r)
}

func CmdBuilder() *cobra.Command {
	opts := &CmdOpts{}
	cmd := &cobra.Command{
		Use:   {{.Name}},
		Short: {{.Short}},
		Long:  {{.Long}},
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return opts.PreRunE(
				opts.initStore(cmd.Context()),
				opts.InitOutput(cmd.OutOrStdout(), cmdTemplate),
				opts.InitInput(cmd.InOrStdin()),
				opts.Validate,
				// TODO: Set required fields
			)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run()
		},
	}

	opts.GenerateFlags(cmd)

	return cmd
}
